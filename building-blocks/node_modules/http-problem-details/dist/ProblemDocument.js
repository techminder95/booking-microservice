"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const StatusCodes_1 = require("./StatusCodes");
const url = __importStar(require("url"));
class ProblemDocument {
    constructor(options, extension) {
        const detail = options.detail;
        const instance = options.instance;
        let type = options.type;
        let title = options.title;
        const status = options.status;
        if (status && !type) {
            type = 'about:blank';
        }
        if (status && type === 'about:blank') {
            title = StatusCodes_1.statusCodes[status];
        }
        if (instance) {
            // eslint-disable-next-line node/no-deprecated-api
            url.parse(instance);
        }
        if (type) {
            // eslint-disable-next-line node/no-deprecated-api
            url.parse(type);
            // eslint-disable-next-line node/no-deprecated-api
        }
        // const result = {
        this.type = type;
        this.title = title;
        if (detail) {
            this.detail = detail;
        }
        this.instance = instance;
        this.status = status;
        // };
        if (extension) {
            const extensionProperties = extension instanceof ProblemDocumentExtension
                ? extension.extensionProperties
                : extension;
            for (const propertyName in extensionProperties) {
                if (extensionProperties.hasOwnProperty(propertyName)) {
                    this[propertyName] = extensionProperties[propertyName];
                }
            }
        }
    }
}
exports.ProblemDocument = ProblemDocument;
class ProblemDocumentOptions {
}
exports.ProblemDocumentOptions = ProblemDocumentOptions;
class ProblemDocumentExtension {
    constructor(extensionProperties) {
        this.extensionProperties = extensionProperties;
    }
}
exports.ProblemDocumentExtension = ProblemDocumentExtension;
//# sourceMappingURL=ProblemDocument.js.map