// source: flight.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.flight.FlightResponse', null, global);
goog.exportSymbol('proto.flight.FlightStatus', null, global);
goog.exportSymbol('proto.flight.GetAvailableSeatsRequest', null, global);
goog.exportSymbol('proto.flight.GetAvailableSeatsResult', null, global);
goog.exportSymbol('proto.flight.GetByIdRequest', null, global);
goog.exportSymbol('proto.flight.GetFlightByIdResult', null, global);
goog.exportSymbol('proto.flight.ReserveSeatRequest', null, global);
goog.exportSymbol('proto.flight.ReserveSeatResult', null, global);
goog.exportSymbol('proto.flight.SeatClass', null, global);
goog.exportSymbol('proto.flight.SeatDtoResponse', null, global);
goog.exportSymbol('proto.flight.SeatType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flight.GetByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flight.GetByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flight.GetByIdRequest.displayName = 'proto.flight.GetByIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flight.GetFlightByIdResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flight.GetFlightByIdResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flight.GetFlightByIdResult.displayName = 'proto.flight.GetFlightByIdResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flight.GetAvailableSeatsResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.flight.GetAvailableSeatsResult.repeatedFields_, null);
};
goog.inherits(proto.flight.GetAvailableSeatsResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flight.GetAvailableSeatsResult.displayName = 'proto.flight.GetAvailableSeatsResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flight.ReserveSeatResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flight.ReserveSeatResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flight.ReserveSeatResult.displayName = 'proto.flight.ReserveSeatResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flight.FlightResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flight.FlightResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flight.FlightResponse.displayName = 'proto.flight.FlightResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flight.GetAvailableSeatsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flight.GetAvailableSeatsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flight.GetAvailableSeatsRequest.displayName = 'proto.flight.GetAvailableSeatsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flight.SeatDtoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flight.SeatDtoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flight.SeatDtoResponse.displayName = 'proto.flight.SeatDtoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flight.ReserveSeatRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flight.ReserveSeatRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flight.ReserveSeatRequest.displayName = 'proto.flight.ReserveSeatRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flight.GetByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.flight.GetByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flight.GetByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.GetByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flight.GetByIdRequest}
 */
proto.flight.GetByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flight.GetByIdRequest;
  return proto.flight.GetByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flight.GetByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flight.GetByIdRequest}
 */
proto.flight.GetByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flight.GetByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flight.GetByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flight.GetByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.GetByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.flight.GetByIdRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.flight.GetByIdRequest} returns this
 */
proto.flight.GetByIdRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flight.GetFlightByIdResult.prototype.toObject = function(opt_includeInstance) {
  return proto.flight.GetFlightByIdResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flight.GetFlightByIdResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.GetFlightByIdResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    flightdto: (f = msg.getFlightdto()) && proto.flight.FlightResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flight.GetFlightByIdResult}
 */
proto.flight.GetFlightByIdResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flight.GetFlightByIdResult;
  return proto.flight.GetFlightByIdResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flight.GetFlightByIdResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flight.GetFlightByIdResult}
 */
proto.flight.GetFlightByIdResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.flight.FlightResponse;
      reader.readMessage(value,proto.flight.FlightResponse.deserializeBinaryFromReader);
      msg.setFlightdto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flight.GetFlightByIdResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flight.GetFlightByIdResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flight.GetFlightByIdResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.GetFlightByIdResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlightdto();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.flight.FlightResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional FlightResponse flightDto = 1;
 * @return {?proto.flight.FlightResponse}
 */
proto.flight.GetFlightByIdResult.prototype.getFlightdto = function() {
  return /** @type{?proto.flight.FlightResponse} */ (
    jspb.Message.getWrapperField(this, proto.flight.FlightResponse, 1));
};


/**
 * @param {?proto.flight.FlightResponse|undefined} value
 * @return {!proto.flight.GetFlightByIdResult} returns this
*/
proto.flight.GetFlightByIdResult.prototype.setFlightdto = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flight.GetFlightByIdResult} returns this
 */
proto.flight.GetFlightByIdResult.prototype.clearFlightdto = function() {
  return this.setFlightdto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flight.GetFlightByIdResult.prototype.hasFlightdto = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.flight.GetAvailableSeatsResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flight.GetAvailableSeatsResult.prototype.toObject = function(opt_includeInstance) {
  return proto.flight.GetAvailableSeatsResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flight.GetAvailableSeatsResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.GetAvailableSeatsResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatdtosList: jspb.Message.toObjectList(msg.getSeatdtosList(),
    proto.flight.SeatDtoResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flight.GetAvailableSeatsResult}
 */
proto.flight.GetAvailableSeatsResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flight.GetAvailableSeatsResult;
  return proto.flight.GetAvailableSeatsResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flight.GetAvailableSeatsResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flight.GetAvailableSeatsResult}
 */
proto.flight.GetAvailableSeatsResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.flight.SeatDtoResponse;
      reader.readMessage(value,proto.flight.SeatDtoResponse.deserializeBinaryFromReader);
      msg.addSeatdtos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flight.GetAvailableSeatsResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flight.GetAvailableSeatsResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flight.GetAvailableSeatsResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.GetAvailableSeatsResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatdtosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.flight.SeatDtoResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SeatDtoResponse seatDtos = 1;
 * @return {!Array<!proto.flight.SeatDtoResponse>}
 */
proto.flight.GetAvailableSeatsResult.prototype.getSeatdtosList = function() {
  return /** @type{!Array<!proto.flight.SeatDtoResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.flight.SeatDtoResponse, 1));
};


/**
 * @param {!Array<!proto.flight.SeatDtoResponse>} value
 * @return {!proto.flight.GetAvailableSeatsResult} returns this
*/
proto.flight.GetAvailableSeatsResult.prototype.setSeatdtosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.flight.SeatDtoResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.flight.SeatDtoResponse}
 */
proto.flight.GetAvailableSeatsResult.prototype.addSeatdtos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.flight.SeatDtoResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flight.GetAvailableSeatsResult} returns this
 */
proto.flight.GetAvailableSeatsResult.prototype.clearSeatdtosList = function() {
  return this.setSeatdtosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flight.ReserveSeatResult.prototype.toObject = function(opt_includeInstance) {
  return proto.flight.ReserveSeatResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flight.ReserveSeatResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.ReserveSeatResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flight.ReserveSeatResult}
 */
proto.flight.ReserveSeatResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flight.ReserveSeatResult;
  return proto.flight.ReserveSeatResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flight.ReserveSeatResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flight.ReserveSeatResult}
 */
proto.flight.ReserveSeatResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flight.ReserveSeatResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flight.ReserveSeatResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flight.ReserveSeatResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.ReserveSeatResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.flight.ReserveSeatResult.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.flight.ReserveSeatResult} returns this
 */
proto.flight.ReserveSeatResult.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flight.FlightResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.flight.FlightResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flight.FlightResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.FlightResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    flightnumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    aircraftid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    departureairportid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    departuredate: (f = msg.getDeparturedate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    arrivedate: (f = msg.getArrivedate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    arriveairportid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    durationminutes: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    flightdate: (f = msg.getFlightdate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 10, 0),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flight.FlightResponse}
 */
proto.flight.FlightResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flight.FlightResponse;
  return proto.flight.FlightResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flight.FlightResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flight.FlightResponse}
 */
proto.flight.FlightResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightnumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAircraftid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDepartureairportid(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDeparturedate(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setArrivedate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setArriveairportid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDurationminutes(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFlightdate(value);
      break;
    case 10:
      var value = /** @type {!proto.flight.FlightStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flight.FlightResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flight.FlightResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flight.FlightResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.FlightResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getFlightnumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAircraftid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDepartureairportid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDeparturedate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getArrivedate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getArriveairportid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDurationminutes();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getFlightdate();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.flight.FlightResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.flight.FlightResponse} returns this
 */
proto.flight.FlightResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string flightNumber = 2;
 * @return {string}
 */
proto.flight.FlightResponse.prototype.getFlightnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.flight.FlightResponse} returns this
 */
proto.flight.FlightResponse.prototype.setFlightnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string aircraftId = 3;
 * @return {string}
 */
proto.flight.FlightResponse.prototype.getAircraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.flight.FlightResponse} returns this
 */
proto.flight.FlightResponse.prototype.setAircraftid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string departureAirportId = 4;
 * @return {string}
 */
proto.flight.FlightResponse.prototype.getDepartureairportid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.flight.FlightResponse} returns this
 */
proto.flight.FlightResponse.prototype.setDepartureairportid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp departureDate = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.flight.FlightResponse.prototype.getDeparturedate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.flight.FlightResponse} returns this
*/
proto.flight.FlightResponse.prototype.setDeparturedate = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flight.FlightResponse} returns this
 */
proto.flight.FlightResponse.prototype.clearDeparturedate = function() {
  return this.setDeparturedate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flight.FlightResponse.prototype.hasDeparturedate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp arriveDate = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.flight.FlightResponse.prototype.getArrivedate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.flight.FlightResponse} returns this
*/
proto.flight.FlightResponse.prototype.setArrivedate = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flight.FlightResponse} returns this
 */
proto.flight.FlightResponse.prototype.clearArrivedate = function() {
  return this.setArrivedate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flight.FlightResponse.prototype.hasArrivedate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string arriveAirportId = 7;
 * @return {string}
 */
proto.flight.FlightResponse.prototype.getArriveairportid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.flight.FlightResponse} returns this
 */
proto.flight.FlightResponse.prototype.setArriveairportid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional double durationMinutes = 8;
 * @return {number}
 */
proto.flight.FlightResponse.prototype.getDurationminutes = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.flight.FlightResponse} returns this
 */
proto.flight.FlightResponse.prototype.setDurationminutes = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional google.protobuf.Timestamp flightDate = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.flight.FlightResponse.prototype.getFlightdate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.flight.FlightResponse} returns this
*/
proto.flight.FlightResponse.prototype.setFlightdate = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flight.FlightResponse} returns this
 */
proto.flight.FlightResponse.prototype.clearFlightdate = function() {
  return this.setFlightdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flight.FlightResponse.prototype.hasFlightdate = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional FlightStatus status = 10;
 * @return {!proto.flight.FlightStatus}
 */
proto.flight.FlightResponse.prototype.getStatus = function() {
  return /** @type {!proto.flight.FlightStatus} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.flight.FlightStatus} value
 * @return {!proto.flight.FlightResponse} returns this
 */
proto.flight.FlightResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional double price = 11;
 * @return {number}
 */
proto.flight.FlightResponse.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.flight.FlightResponse} returns this
 */
proto.flight.FlightResponse.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flight.GetAvailableSeatsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.flight.GetAvailableSeatsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flight.GetAvailableSeatsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.GetAvailableSeatsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    flightid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flight.GetAvailableSeatsRequest}
 */
proto.flight.GetAvailableSeatsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flight.GetAvailableSeatsRequest;
  return proto.flight.GetAvailableSeatsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flight.GetAvailableSeatsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flight.GetAvailableSeatsRequest}
 */
proto.flight.GetAvailableSeatsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFlightid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flight.GetAvailableSeatsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flight.GetAvailableSeatsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flight.GetAvailableSeatsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.GetAvailableSeatsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlightid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 flightId = 1;
 * @return {number}
 */
proto.flight.GetAvailableSeatsRequest.prototype.getFlightid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.flight.GetAvailableSeatsRequest} returns this
 */
proto.flight.GetAvailableSeatsRequest.prototype.setFlightid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flight.SeatDtoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.flight.SeatDtoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flight.SeatDtoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.SeatDtoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    seatnumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pb_class: jspb.Message.getFieldWithDefault(msg, 4, 0),
    flightid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    isreserved: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flight.SeatDtoResponse}
 */
proto.flight.SeatDtoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flight.SeatDtoResponse;
  return proto.flight.SeatDtoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flight.SeatDtoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flight.SeatDtoResponse}
 */
proto.flight.SeatDtoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatnumber(value);
      break;
    case 3:
      var value = /** @type {!proto.flight.SeatType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {!proto.flight.SeatClass} */ (reader.readEnum());
      msg.setClass(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFlightid(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsreserved(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flight.SeatDtoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flight.SeatDtoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flight.SeatDtoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.SeatDtoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSeatnumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getClass();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getFlightid();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getIsreserved();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.flight.SeatDtoResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.flight.SeatDtoResponse} returns this
 */
proto.flight.SeatDtoResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string seatNumber = 2;
 * @return {string}
 */
proto.flight.SeatDtoResponse.prototype.getSeatnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.flight.SeatDtoResponse} returns this
 */
proto.flight.SeatDtoResponse.prototype.setSeatnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SeatType type = 3;
 * @return {!proto.flight.SeatType}
 */
proto.flight.SeatDtoResponse.prototype.getType = function() {
  return /** @type {!proto.flight.SeatType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.flight.SeatType} value
 * @return {!proto.flight.SeatDtoResponse} returns this
 */
proto.flight.SeatDtoResponse.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional SeatClass class = 4;
 * @return {!proto.flight.SeatClass}
 */
proto.flight.SeatDtoResponse.prototype.getClass = function() {
  return /** @type {!proto.flight.SeatClass} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.flight.SeatClass} value
 * @return {!proto.flight.SeatDtoResponse} returns this
 */
proto.flight.SeatDtoResponse.prototype.setClass = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int64 flightId = 5;
 * @return {number}
 */
proto.flight.SeatDtoResponse.prototype.getFlightid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.flight.SeatDtoResponse} returns this
 */
proto.flight.SeatDtoResponse.prototype.setFlightid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool isReserved = 6;
 * @return {boolean}
 */
proto.flight.SeatDtoResponse.prototype.getIsreserved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.flight.SeatDtoResponse} returns this
 */
proto.flight.SeatDtoResponse.prototype.setIsreserved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flight.ReserveSeatRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.flight.ReserveSeatRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flight.ReserveSeatRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.ReserveSeatRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    flightid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    seatnumber: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flight.ReserveSeatRequest}
 */
proto.flight.ReserveSeatRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flight.ReserveSeatRequest;
  return proto.flight.ReserveSeatRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flight.ReserveSeatRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flight.ReserveSeatRequest}
 */
proto.flight.ReserveSeatRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFlightid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatnumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flight.ReserveSeatRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flight.ReserveSeatRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flight.ReserveSeatRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.ReserveSeatRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlightid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSeatnumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 flightId = 1;
 * @return {number}
 */
proto.flight.ReserveSeatRequest.prototype.getFlightid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.flight.ReserveSeatRequest} returns this
 */
proto.flight.ReserveSeatRequest.prototype.setFlightid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string seatNumber = 2;
 * @return {string}
 */
proto.flight.ReserveSeatRequest.prototype.getSeatnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.flight.ReserveSeatRequest} returns this
 */
proto.flight.ReserveSeatRequest.prototype.setSeatnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.flight.FlightStatus = {
  FLIGHT_STATUS_UNKNOWN: 0,
  FLIGHT_STATUS_FLYING: 1,
  FLIGHT_STATUS_DELAY: 2,
  FLIGHT_STATUS_CANCELED: 3,
  FLIGHT_STATUS_COMPLETED: 4
};

/**
 * @enum {number}
 */
proto.flight.SeatType = {
  SEAT_TYPE_UNKNOWN: 0,
  SEAT_TYPE_WINDOW: 1,
  SEAT_TYPE_MIDDLE: 2,
  SEAT_TYPE_AISLE: 3
};

/**
 * @enum {number}
 */
proto.flight.SeatClass = {
  SEAT_CLASS_UNKNOWN: 0,
  SEAT_CLASS_FIRST_CLASS: 1,
  SEAT_CLASS_BUSINESS: 2,
  SEAT_CLASS_ECONOMY: 3
};

goog.object.extend(exports, proto.flight);
